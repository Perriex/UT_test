/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 30 10:52:44 GMT 2023
 */

package tutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import tutorial.ComplexProgram;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ComplexProgram_ESTest extends ComplexProgram_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ComplexProgram complexProgram0 = new ComplexProgram();
      ComplexProgram.Node complexProgram_Node0 = complexProgram0.new Node(527);
      ComplexProgram.BinarySearchTree complexProgram_BinarySearchTree0 = complexProgram0.new BinarySearchTree();
      ComplexProgram.Node complexProgram_Node1 = complexProgram_BinarySearchTree0.search(complexProgram_Node0, (-1));
      assertNull(complexProgram_Node1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ComplexProgram complexProgram0 = new ComplexProgram();
      ComplexProgram.BinarySearchTree complexProgram_BinarySearchTree0 = complexProgram0.new BinarySearchTree();
      ComplexProgram.Node complexProgram_Node0 = complexProgram_BinarySearchTree0.search((ComplexProgram.Node) null, (-1));
      assertNull(complexProgram_Node0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ComplexProgram complexProgram0 = new ComplexProgram();
      ComplexProgram.BinarySearchTree complexProgram_BinarySearchTree0 = complexProgram0.new BinarySearchTree();
      ComplexProgram.Node complexProgram_Node0 = complexProgram0.new Node((-1764));
      ComplexProgram.Node complexProgram_Node1 = complexProgram_BinarySearchTree0.insert(complexProgram_Node0, 653);
      assertNotNull(complexProgram_Node1);
      
      ComplexProgram.Node complexProgram_Node2 = complexProgram_BinarySearchTree0.search(complexProgram_Node1, 0);
      assertNull(complexProgram_Node2);
      assertSame(complexProgram_Node1, complexProgram_Node0);
      assertSame(complexProgram_Node0, complexProgram_Node1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ComplexProgram complexProgram0 = new ComplexProgram();
      ComplexProgram.BinarySearchTree complexProgram_BinarySearchTree0 = complexProgram0.new BinarySearchTree();
      ComplexProgram.Node complexProgram_Node0 = complexProgram0.new Node(1349);
      ComplexProgram.Node complexProgram_Node1 = complexProgram_BinarySearchTree0.search(complexProgram_Node0, 1349);
      assertSame(complexProgram_Node0, complexProgram_Node1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ComplexProgram complexProgram0 = new ComplexProgram();
      ComplexProgram.BinarySearchTree complexProgram_BinarySearchTree0 = complexProgram0.new BinarySearchTree();
      ComplexProgram.Node complexProgram_Node0 = complexProgram_BinarySearchTree0.insert((ComplexProgram.Node) null, 2607);
      ComplexProgram.Node complexProgram_Node1 = complexProgram_BinarySearchTree0.insert(complexProgram_Node0, 2607);
      assertSame(complexProgram_Node1, complexProgram_Node0);
      assertNotNull(complexProgram_Node1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ComplexProgram complexProgram0 = new ComplexProgram();
      ComplexProgram.BinarySearchTree complexProgram_BinarySearchTree0 = complexProgram0.new BinarySearchTree();
      ComplexProgram.Node complexProgram_Node0 = complexProgram0.new Node((-1764));
      ComplexProgram.Node complexProgram_Node1 = complexProgram_BinarySearchTree0.insert(complexProgram_Node0, (-6586));
      assertNotNull(complexProgram_Node1);
      assertSame(complexProgram_Node1, complexProgram_Node0);
  }
}
