/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 30 15:03:32 GMT 2023
 */

package morriex.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Date;
import morriex.entity.User;
import morriex.model.UserModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      userModel0.nickname = "~=O|>Hr)V,`Ik]eI8D1";
      User user0 = new User(userModel0);
      UserModel userModel1 = user0.getModel();
      assertNotSame(userModel0, userModel1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      userModel0.email = "]%*{BD'&U";
      User user0 = new User(userModel0);
      UserModel userModel1 = user0.getModel();
      assertFalse(userModel1.equals((Object)userModel0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      User user0 = new User(userModel0);
      ArrayList<Integer> arrayList0 = user0.getWatch();
      Integer integer0 = new Integer((-2147483644));
      arrayList0.add(integer0);
      Integer integer1 = new Integer(16);
      user0.addToWatch(integer1);
      user0.removeFromWatch(integer1);
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      User user0 = new User(userModel0);
      user0.setWatchlist((ArrayList<Integer>) null);
      ArrayList<Integer> arrayList0 = user0.getWatch();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      User user0 = new User(userModel0);
      ArrayList<Integer> arrayList0 = user0.getWatch();
      Integer integer0 = new Integer((-2998));
      arrayList0.add(integer0);
      ArrayList<Integer> arrayList1 = user0.getWatch();
      assertSame(arrayList1, arrayList0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      MockDate mockDate0 = new MockDate();
      userModel0.birthDate = (Date) mockDate0;
      User user0 = new User(userModel0);
      int int0 = user0.getAge();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      MockDate mockDate0 = new MockDate((-2051), (-2051), (-2051));
      userModel0.birthDate = (Date) mockDate0;
      User user0 = new User(userModel0);
      int int0 = user0.getAge();
      assertEquals(1685, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      MockDate mockDate0 = new MockDate((-4857), (-2145652884), (-4857), (-2145652884), (-2861));
      userModel0.birthDate = (Date) mockDate0;
      User user0 = new User(userModel0);
      int int0 = user0.getAge();
      assertEquals((-179050135), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      userModel0.password = "morriex.entity.User";
      User user0 = new User(userModel0);
      user0.hassPass();
      Boolean boolean0 = user0.checkPassword("morriex.entity.User");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      User user0 = new User(userModel0);
      user0.setWatchlist((ArrayList<Integer>) null);
      try { 
        user0.removeFromWatch((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("morriex.entity.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      User user0 = new User(userModel0);
      user0.watchList = null;
      try { 
        user0.addToWatch((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      User user0 = null;
      try {
        user0 = new User((UserModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("morriex.entity.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      User user0 = new User(userModel0);
      Integer integer0 = new Integer((-2147483644));
      try { 
        user0.removeFromWatch(integer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MovieNotFound
         //
         verifyException("morriex.entity.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      User user0 = new User(userModel0);
      user0.addToWatch((Integer) null);
      user0.removeFromWatch((Integer) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      User user0 = new User(userModel0);
      user0.addToWatch((Integer) null);
      try { 
        user0.addToWatch((Integer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // MovieAlreadyExists
         //
         verifyException("morriex.entity.User", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      User user0 = new User(userModel0);
      // Undeclared exception!
      try { 
        user0.getAge();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      User user0 = new User(userModel0);
      Boolean boolean0 = user0.checkPassword("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserModel userModel0 = new UserModel();
      User user0 = new User(userModel0);
      user0.hassPass();
      UserModel userModel1 = user0.getModel();
      assertFalse(userModel1.equals((Object)userModel0));
  }
}
